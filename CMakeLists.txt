# http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects
# lot's of cmake modules: https://github.com/rpavlik/cmake-modules

cmake_minimum_required(VERSION 2.6)
project(chat CXX C)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

# determine arch: x86, x86_64, arm, etc
include(TargetArch)
target_architecture(ARCH)

if(${ARCH} STREQUAL "i386")
  add_definitions(-DARCH_X86)
endif()
if(${ARCH} STREQUAL "x86_64")
  add_definitions(-DARCH_X64)
endif()


set(CMAKE_C_COMPILER "gcc-4.6")
set(CMAKE_CXX_COMPILER "/usr/bin/g++-4.6")

set(CMAKE_CXX_FLAGS "-g -Wall -Wextra -Werror -pedantic -std=c++0x")

if (CMAKE_COMPILER_IS_GNUCXX)
    ADD_DEFINITIONS(-Wall -Wcast-align -Wchar-subscripts -Wpointer-arith
       -Wwrite-strings -Wpacked -Wformat-security
       -Woverloaded-virtual -Wnon-virtual-dtor )
endif(CMAKE_COMPILER_IS_GNUCXX)

set(CMAKE_AUTOMOC TRUE)


find_package(ZeroCIce REQUIRED)

find_package(Qt4 COMPONENTS QtCore REQUIRED)
include(${QT_USE_FILE})
add_definitions(${QT_DEFINITIONS})

find_package(QCA2 REQUIRED)

include_directories(SYSTEM ${QT_INCLUDES} ${QCA2_INCLUDE_DIR})

find_package(Boost COMPONENTS program_options filesystem system thread REQUIRED)
include_directories(SYSTEM ${Boost_INCLUDE_DIRS})


include_directories(SYSTEM ${ZeroCIce_INCLUDE_DIR})
set(LIBS ${LIBS} ${ZeroCIceCore_LIBRARY})
set(LIBS ${LIBS} ${ZeroCIceUtil_LIBRARY})
set(LIBS ${LIBS} ${ZeroCIceSSL_LIBRARY})
set(LIBS ${LIBS} ${Boost_LIBRARIES})
set(LIBS ${LIBS} ${QT_LIBRARIES})
set(LIBS ${LIBS} ${QT_QTDECLARATIVE_LIBRARY})
set(LIBS ${LIBS} dl)
set(LIBS ${LIBS} pthread)


# only enable pretty backtraces if libbfd is available
find_package(bfd)
if(bfd_FOUND)
  find_package(ZLIB REQUIRED)
  add_definitions(-DBACKWARD_HAS_BFD -DPACKAGE -DPACKAGE_VERSION)
  set(LIBS ${LIBS} ${bfd_LIBRARIES} "-liberty" ${ZLIB_LIBRARIES})   # for backward pretty stacktracing
endif()

# only enable gccfilter if necessary perl modules are present
find_package(PerlModules COMPONENTS Regexp::Common Getopt::ArgvFile Getopt::Long Term::ANSIColor)
if(${PERLMODULES_FOUND} STREQUAL "TRUE")
  if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_GNUCPP)
    option(COLOR_GCC "Use GCCFilter to color compiler output messages" ON)
    set(COLOR_GCC_OPTIONS "-c -r -w" CACHE STRING "Arguments that are passed to gccfilter when output coloring is switchend on. Defaults to -c -r -w.")
    if(COLOR_GCC)
      set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${PROJECT_SOURCE_DIR}/cmake/gccfilter ${COLOR_GCC_OPTIONS}")
    endif()
  endif()
endif()


# hack to show files in Qt Creator
FILE(GLOB QML_FILES_LIST "${CMAKE_CURRENT_SOURCE_DIR}/ui/*.qml")
add_custom_target( QML_Resources ALL SOURCES ${QML_FILES_LIST} )

FILE(GLOB HEADER_FILES_LIST "${CMAKE_CURRENT_SOURCE_DIR}/*.h")
add_custom_target( HEADER_Resources ALL SOURCES ${HEADER_FILES_LIST} )


# create special bin dir
add_custom_command(OUTPUT bin_dir
    POST_BUILD
    COMMAND cmake -E make_directory "${CMAKE_BINARY_DIR}/bin")

# copy resources to build dir
add_custom_command(OUTPUT ui_files
    POST_BUILD
    COMMAND cmake -E create_symlink "${CMAKE_CURRENT_SOURCE_DIR}/ui" "${CMAKE_BINARY_DIR}/bin/ui")

add_custom_command(OUTPUT cert
    POST_BUILD
    COMMAND cmake -E copy "${CMAKE_CURRENT_SOURCE_DIR}/ca.crt" "${CMAKE_BINARY_DIR}/bin/ca.crt")

add_custom_command(OUTPUT server_cert
    POST_BUILD
    COMMAND cmake -E copy "${CMAKE_CURRENT_SOURCE_DIR}/server.crt" "${CMAKE_BINARY_DIR}/bin/server.crt")

add_custom_command(OUTPUT server_key
    POST_BUILD
    COMMAND cmake -E copy "${CMAKE_CURRENT_SOURCE_DIR}/server.key" "${CMAKE_BINARY_DIR}/bin/server.key")


# copy executables to bin dir
add_custom_command(OUTPUT client_binary
    POST_BUILD
    COMMAND cmake -E copy "${CMAKE_BINARY_DIR}/client/client" "${CMAKE_BINARY_DIR}/bin/client")

add_custom_command(OUTPUT server_binary
    POST_BUILD
    COMMAND cmake -E copy "${CMAKE_BINARY_DIR}/server/server" "${CMAKE_BINARY_DIR}/bin/server")

# make dir for plugins
add_custom_command(OUTPUT plugin_dir
    POST_BUILD
    COMMAND cmake -E make_directory "${CMAKE_BINARY_DIR}/bin/plugins")


include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/common)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/dependencies)


add_definitions(-DSOCI_USE_BOOST)
add_subdirectory(dependencies)
include_directories(${CMAKE_BINARY_DIR}/dependencies/zmq/zmq-3-2-2-prefix/include)
link_directories(${CMAKE_BINARY_DIR}/dependencies/zmq/zmq-3-2-2-prefix/lib)
include_directories(${CMAKE_BINARY_DIR}/dependencies/soci/soci-3-2-1-prefix/include)

if(${ARCH} STREQUAL "i386")
  link_directories(${CMAKE_BINARY_DIR}/dependencies/soci/soci-3-2-1-prefix/lib)
endif()
if(${ARCH} STREQUAL "x86_64")
  link_directories(${CMAKE_BINARY_DIR}/dependencies/soci/soci-3-2-1-prefix/lib64)
endif()

add_subdirectory(ice)
# header files generated by ice are in the binary dir
include_directories(${CMAKE_CURRENT_BINARY_DIR}/ice)

add_subdirectory(common)
add_subdirectory(client)
add_subdirectory(server)
add_subdirectory(plugins)

add_subdirectory(doxygen)

add_custom_target(post_build_steps ALL DEPENDS bin_dir server client ui_files cert server_cert server_key client_binary server_binary plugin_dir)

add_subdirectory(tests)
